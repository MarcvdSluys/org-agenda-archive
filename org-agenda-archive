#!/bin/env python3

""" Convert the tasks from an Orgmode agenda file to Google Tasks.

    2020-05-08, MvdS:  initial version, adapted from org2gtasks.py.
"""

# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete

# from orgparse import load, loads
import orgparse as op


def main():
    # Parse command-line arguments:
    parser = argparse.ArgumentParser(description="Copy my Orgmode tasks to Google Tasks, removing all existing Google tasks.", 
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)  # Use capital, period, add default values
    
    # Mutually exclusive group:
    group  = parser.add_mutually_exclusive_group()
    group.add_argument("-v", "--verbose", action="store_true", help="produce progress output (e.g. for debugging)")   # Use lower case
    group.add_argument("-q", "--quiet",   action="store_true", help="produce no (error) output (e.g. for cron job)")  # False by default
    
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    
    # Get my home directory:
    # from pathlib import Path
    # home = str(Path.home())
    
    # Process Email.org:
    # process_file(home+'/.org/Email.org', args.verbose)  
    # process_file(home+'/.org/HAN.org', args.verbose)  # ISSUE: multiple tags in Python set, variable order!!!
    process_file('HAN.org', args.verbose)  # ISSUE: multiple tags in Python set, variable order!!!
    
    # Process Hack.org:
    # process_file(home+'/.org/Hack.org', args.verbose)
    # process_file(home+'/.org/Priv.org', args.verbose)
    # process_file(home+'/.org/RU.org', args.verbose)
    # process_file(home+'/.org/Sky.org', args.verbose)
    # process_file(home+'/.org/GitHub.org', args.verbose)
    
    
    


def process_file(orgFile, verbose):
    """Process Orgmode file with three levels of nodes.
    
    Args:
      orgFile (str):   Orgmode file name
      verbose (bool):  verbosity flag (optional, default = False)
    """
    
    org = op.load(orgFile)
    
    for node1 in org.children:
        process_headings(node1, verbose)
        
        for node2 in node1.children:
            process_headings(node2, verbose)
            
            for node3 in node2.children:
                process_headings(node3, verbose)
                
                for node4 in node3.children:
                    process_headings(node4, verbose)
                    
                    for node5 in node4.children:
                        process_headings(node5, verbose)
                    
    return



def process_headings(node, verbose):
    """Copy the Orgmode headings of a node to Google Tasks"""

    # Issue: empty headings are lost!
    if(len(node)>1): print(node)
    if(len(node) != len(node.children) + 1): return
    
    # Loop over headings in this node:
    for head in node.children:
        
        # if( (not head.scheduled) and (not head.closed) and (not head.clock) and (not head.deadline) ):
        # has_date(): has .scheduled, .deadline, .datelist or .rangelist.
        # if( (not head.has_date()) and (not head.closed) and (not head.clock) ):
        #     print(head)
        
        year = None
        if(head.datelist):
            year = head.datelist[0].start.year
        elif(head.rangelist):
            year = head.rangelist[0].start.year
        elif(head.scheduled):
            year = head.scheduled.start.year
        elif(head.deadline):
            year = head.deadline.start.year
        elif(head.closed):
            year = head.closed.start.year
        elif(head.clock):
            year = head.clock[0].start.year
            
        if(not year):
            print(head)
        elif(year < 2021):
            print(head)
            

# ### Main ###
if __name__=="__main__": main()

