#!/bin/env python

#  Copyright (c) 2020  Marc van der Sluys - marc.vandersluys.nl
#   
#  This file is part of the org-agenda-archive Python package, containing a Python module to archive entries
#  from your emacs orgmode agenda.  See: https://github.com/MarcvdSluys/org-agenda-archive
#   
#  This is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#  
#  This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License along with this code.  If not, see
#  <http://www.gnu.org/licenses/>.


"""Archive emacs orgmode agenda items for a certain year.

   Store them in a different file with the same headings tree structure, and keep the rest in a third
   (cleaned) file.  Most work is done by the argparse package.

"""

# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete
import orgparse as op



def main():
    # Parse command-line arguments:
    parser = argparse.ArgumentParser(description="Archive orgmode agenda items for a certain year.", 
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)  # Use capital, period, add default values
    
    # Required arguments:
    parser.add_argument("fileName",  type=str, help="name of the orgmode agenda file to process")
    parser.add_argument("matchYear", type=int, help="entries matching this year will be archived")
    
    # Mutually exclusive group:
    group  = parser.add_mutually_exclusive_group()
    group.add_argument("-v", "--verbose", action="store_true", help="produce progress output (e.g. for debugging)")   # Use lower case
    group.add_argument("-q", "--quiet",   action="store_true", help="produce no (error) output (e.g. for cron job)")  # False by default
    
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    
    # Arguments -> global variables
    global verbose, matchYear
    verbose = args.verbose
    matchYear = args.matchYear
    
    process_file(args.fileName)  # ISSUE: multiple tags in Python set, variable order!!!
    
    return
    


def process_file(orgFile):
    """Process an Orgmode file with up to five levels of nodes.
    
    Args:
      orgFile (str):   Orgmode file name
    """
    
    # Read input file:
    try:
        org = op.load(orgFile)
    except Exception as e:
        print('Error opening file '+str(e))
        exit(1)
        
    # Generate names for output file and open them:
    keepFileName = orgFile.replace(".org","")+"-cleaned-"+str(matchYear)+".org"
    archFileName = orgFile.replace(".org","")+"-archive-"+str(matchYear)+".org"
    
    global keepFile, archFile
    
    try:
        keepFile = open(keepFileName, mode='x')  # Open to write
    except Exception as e:
        print('Error opening file '+str(e))
        exit(1)
        
    try:
        archFile = open(archFileName, mode='x')  # Open to write
    except Exception as e:
        print('Error opening file '+str(e))
        exit(1)
        
    print("Any entries from the year "+str(matchYear)+" will be archived in "+archFileName+",")
    print("all other entries will be kept in "+keepFileName+"\n")
    
    
    # Create counters:
    global cntSec, cntKeep, cntArch
    cntSec = cntKeep = cntArch = 0
    
    # Walk through a maximum of five levels of nodes:
    for node1 in org.children:
        process_headings(node1)
        
        for node2 in node1.children:
            process_headings(node2)
            
            for node3 in node2.children:
                process_headings(node3)
                
                for node4 in node3.children:
                    process_headings(node4)
                    
                    for node5 in node4.children:
                        process_headings(node5)
    
    
    # Close output files:
    keepFile.close()
    archFile.close()
    
    print("Sections found in "+orgFile+":   ", cntSec-cntArch-cntKeep)
    print("Entries archived in "+archFileName+":  ", cntArch)
    print("Entries kept in "+keepFileName+":  ", cntKeep)
    
    return



def process_headings(node):
    """Copy the Orgmode headings of a node to either the archive file or the clean file.
    
    Parameters:
      node:  Orgmode node.
    
    """
    
    global cntSec, cntKeep, cntArch
    cntSec += 1
    
    # Issue: empty headings are lost!
    if len(node)>1:
        keepFile.write(str(node)+"\n")
        archFile.write(str(node)+"\n")
        # print(node)
        
    if len(node) != len(node.children) + 1: return
    
    # Loop over headings in this node:
    for head in node.children:
        
        year = None
        if head.datelist:
            year = head.datelist[0].start.year
        elif head.rangelist:
            year = head.rangelist[0].start.year
        elif head.scheduled:
            year = head.scheduled.start.year
        elif head.deadline:
            year = head.deadline.start.year
        elif head.clock:
            year = head.clock[0].start.year
        elif head.closed:
            year = head.closed.start.year
            
        if not year:                       # No date present, keep this entry
            # print(head)
            keepFile.write(str(head)+"\n")
            cntKeep += 1
        elif year == matchYear:            # Date present, and matches: archive
            # print(head)
            archFile.write(str(head)+"\n")
            cntArch += 1
        else:                               # Date present, but no match: keep
            keepFile.write(str(head)+"\n")
            cntKeep += 1
            
    return

        
# ### Main ###
if __name__=="__main__": main()

