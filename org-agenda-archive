#!/bin/env python
# PYTHON_ARGCOMPLETE_OK
# -*- coding: utf-8 -*-

#  Copyright (c) 2020-2024  Marc van der Sluys - marc.vandersluys.nl
#   
#  This file is part of the org-agenda-archive Python package, containing a Python module to archive entries
#  from your emacs orgmode agenda.  See: https://github.com/MarcvdSluys/org-agenda-archive
#   
#  This is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#  
#  This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License along with this code.  If not, see
#  <http://www.gnu.org/licenses/>.


"""Archive emacs orgmode agenda items for a certain year.

   Store entries for which the NEWEST year matches the target year in a different file with the same headings
   tree structure, and keep the rest in a third (cleaned) file.  For example, an entry labelled as created in
   2021 but with clock times and closed in 2022 will be archived if 2022 is the target year, but NOT if 2021
   is the target.  Most work in this code is done by Karlicoss' orgparse package.

"""

import colored_traceback
colored_traceback.add_hook()

import argparse
import argcomplete
import orgparse as op



def main():

    args = get_cli_arguments()
    
    process_file(args)
    
    return
    

def process_file(args):
    """Process an Orgmode file with up to five levels of nodes.
    
    Parameters:
      args (stuct):   cli arguments
    
    ISSUE:
      - multiple tags in Python set, variable order!
    """
    
    # Read input file:
    try:
        org = op.load(args.fileName)
    except Exception as e:
        print('Error opening file '+str(e))
        exit(1)
        
    # Generate names for output file and open them:
    keepFileName = args.fileName.replace(".org","")+"-cleaned-"+str(args.matchYear)+".org"
    archFileName = args.fileName.replace(".org","")+"-archive-"+str(args.matchYear)+".org"
    
    global keepFile, archFile
    
    try:
        keepFile = open(keepFileName, mode='x')  # Open to write
    except Exception as e:
        print('Error opening file '+str(e))
        exit(1)
        
    try:
        archFile = open(archFileName, mode='x')  # Open to write
    except Exception as e:
        print('Error opening file '+str(e))
        exit(1)
        
    if args.verbosity>0:
        print("Any entries from the year "+str(args.matchYear)+" will be archived in "+archFileName+",")
        print("all other entries will be kept in "+keepFileName+"\n")
    
    
    # Create counters:
    global cntSec, cntKeep, cntArch
    cntSec = cntKeep = cntArch = 0
    
    # Write file header (before first section) to both files:
    keepFile.write(str(org)+"\n")
    archFile.write(str(org)+"\n")
    
    # Walk through a maximum of five levels of nodes:
    for node1 in org.children:
        process_headings(args, node1)
        
        for node2 in node1.children:
            process_headings(args, node2)
            
            for node3 in node2.children:
                process_headings(args, node3)
                
                for node4 in node3.children:
                    process_headings(args, node4)
                    
                    for node5 in node4.children:
                        process_headings(args, node5)
    
    
    # Close output files:
    keepFile.close()
    archFile.close()
    
    if args.verbosity>0:
        print("Sections found in "+args.fileName+":   ", cntSec-cntArch-cntKeep)
        print("Entries archived in "+archFileName+":  ", cntArch)
        print("Entries kept in "+keepFileName+":  ", cntKeep)
    
    return



def process_headings(args, node):
    """Copy the Orgmode headings of a node to either the archive file or the clean file.
    
    Parameters:
      args (stuct):   cli arguments
      node:  Orgmode node.
    """
    
    global cntSec, cntKeep, cntArch
    cntSec += 1
    
    # Issue: empty headings are lost!
    if len(node)>1:
        keepFile.write(str(node)+"\n")
        archFile.write(str(node)+"\n")
        # print(node)
        
    if len(node) != len(node.children) + 1: return
    
    # Loop over headings in this node:
    for head in node.children:
        
        if args.verbosity > 4:  print(head)
        
        yearmax = 0
        if head.datelist:
            yearmax = max(yearmax, head.datelist[0].start.year, head.datelist[-1].start.year)
            if args.verbosity > 3:  print('Datelist: ', head.datelist)
            if args.verbosity > 2:  print('Years from datelist:  ', head.datelist[-1].start.year, '-', head.datelist[0].start.year)  # Rev. chron. order?
        if head.rangelist:
            yearmax = max(yearmax, head.rangelist[0].start.year, head.rangelist[-1].start.year)
            if args.verbosity > 3:  print('Rangelist: ', head.rangelist)
            if args.verbosity > 2:  print('Years from rangelist: ', head.rangelist[-1].start.year, '-', head.rangelist[0].start.year)  # Rev. chron. order?
        if head.scheduled:
            yearmax = max(yearmax, head.scheduled.start.year)
            if args.verbosity > 2:  print('Year from scheduled:  ', head.scheduled.start.year)
        if head.deadline:
            yearmax = max(yearmax, head.deadline.start.year)
            if args.verbosity > 2:  print('Year from deadline:   ', head.deadline.start.year)
        if head.clock:
            yearmax = max(yearmax, head.clock[0].start.year, head.clock[-1].start.year)
            if args.verbosity > 3:  print('Clock: ', head.clock)
            if args.verbosity > 2:  print('Years from clock:     ', head.clock[-1].start.year, '-', head.clock[0].start.year)  # Rev. chron. order?
        if head.closed:
            yearmax = max(yearmax, head.closed.start.year)
            if args.verbosity > 2:  print('Year from closed:     ', head.closed.start.year)
        
        
        if args.verbosity > 1:      print('matchYear, yearmax:   ', args.matchYear, '/', yearmax)
        
        if yearmax==0:                      # No date present, keep this entry
            if args.verbosity > 1:      print('matchYear, yearmax:   ', args.matchYear, '/', yearmax, ' - keeping')
            keepFile.write(str(head)+"\n")
            cntKeep += 1
        elif yearmax == args.matchYear:         # Date present, and matches: archive
            if args.verbosity > 1:      print('matchYear, yearmax:   ', args.matchYear, '/', yearmax, ' - archiving')
            archFile.write(str(head)+"\n")
            cntArch += 1
        else:                                   # Date present, but no match: keep
            if args.verbosity > 1:      print('matchYear, yearmax:   ', args.matchYear, '/', yearmax, ' - keeping')
            keepFile.write(str(head)+"\n")
            cntKeep += 1
            
        if args.verbosity > 1:  print()
        
    return

        
def get_cli_arguments():
    """Get the command-line arguments.
    
    Returns:
      (struct):  Struct containing command-line arguments.
    """
    
    # Parse command-line arguments:
    parser = argparse.ArgumentParser(description="Archive orgmode agenda items for a certain year.", 
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)  # Use capital, period, add default values
    
    # Required arguments:
    parser.add_argument("fileName",  type=str, help="name of the orgmode agenda file to process")
    parser.add_argument("matchYear", type=int, help="entries matching this year will be archived")
    
    # Mutually exclusive group:
    group  = parser.add_mutually_exclusive_group()
    group.add_argument('-v', '--verbosity', action='count', default=1, help='increase output verbosity')  # Counts number of occurrences
    group.add_argument("-q", "--quiet",   action="store_true", help="produce no (error) output (e.g. for cron job)")  # False by default
    
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    
    if args.quiet: args.verbosity=0
    
    return args
    

# ### Main ###
if __name__=="__main__": main()

